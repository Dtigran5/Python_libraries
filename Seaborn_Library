Seaborn Library

Seaborn is a Python data visualization library built on top of Matplotlib. It provides a high-level interface for creating attractive and informative statistical graphics. Seaborn simplifies many common tasks for creating plots that help visualize the relationships in datasets, especially for data exploration and statistical analysis.

Seaborn integrates very well with Pandas and other libraries in the PyData ecosystem, making it an excellent choice for working with dataframes and complex datasets. It comes with built-in themes, color palettes, and functions that make creating visually appealing and informative plots easier than using Matplotlib directly.
Key Features:

    High-level API for statistical plots: Easy to create complex visualizations such as heatmaps, categorical plots, and regression plots.
    Integration with Pandas: Seamless integration with Pandas dataframes for quick and easy plotting of datasets.
    Themes and Color Palettes: Built-in styles and color schemes for visually appealing plots.
    Support for multi-plot grids: Convenient functions for creating complex plot grids based on features in the data.
    Automatic computation of statistical estimates: Built-in functions for aggregating and visualizing data (e.g., computing means or confidence intervals).

Table of Most Useful and Important Seaborn Functions

sns.scatterplot() Create a scatter plot. sns.scatterplot(x="total_bill", y="tip", data=tips)
sns.lineplot() Create a line plot. sns.lineplot(x="size", y="tip", data=tips)
sns.barplot() Create a bar plot with categorical data. sns.barplot(x="day", y="total_bill", data=tips)
sns.boxplot() Create a box plot. sns.boxplot(x="day", y="total_bill", data=tips)
sns.violinplot() Create a violin plot (similar to a box plot, but shows distribution). sns.violinplot(x="day", y="total_bill", data=tips)
sns.countplot() Create a count plot (similar to bar plot, but counts occurrences of categories). sns.countplot(x="day", data=tips)
sns.heatmap() Create a heatmap for visualizing matrix-like data (e.g., correlation matrices). sns.heatmap(flights_pivot, annot=True)
sns.lmplot() Create a linear regression plot (scatter with optional regression line). sns.lmplot(x="total_bill", y="tip", data=tips)
sns.pairplot() Create a matrix of scatter plots for all pairwise relationships in a dataset. sns.pairplot(tips)
sns.catplot() Create plots for categorical data (box, bar, etc.) in a flexible way. sns.catplot(x="day", y="total_bill", data=tips, kind="box")
sns.jointplot() Create a scatter plot and histogram showing the joint distribution of two variables. sns.jointplot(x="total_bill", y="tip", data=tips)
sns.distplot() Plot a univariate distribution of observations. sns.distplot(tips['total_bill'])
sns.kdeplot() Create a kernel density estimate plot (similar to a histogram, but smoother). sns.kdeplot(tips['total_bill'])
sns.swarmplot() Create a categorical scatter plot with data points that donâ€™t overlap. sns.swarmplot(x="day", y="total_bill", data=tips)
sns.set() Set the aesthetic parameters of plots (e.g., style, color palette). sns.set(style="whitegrid")
sns.set_style() Set the visual style of the plot (e.g., white, dark, ticks, etc.). sns.set_style("darkgrid")
sns.set_palette() Set the color palette for the plot. sns.set_palette("pastel")
sns.despine() Remove the top and right spines from plots to make them cleaner. sns.despine()
sns.heatmap() Create a heatmap for visualizing matrix-like data (e.g., correlation matrices). sns.heatmap(corr_matrix)
sns.regplot() Create a scatter plot with a regression line (more control than lmplot()). sns.regplot(x="total_bill", y="tip", data=tips)
sns.factorplot() Create plots for categorical variables with multiple plot types (replaced by catplot() in newer versions). sns.factorplot(x="day", y="total_bill", data=tips)
