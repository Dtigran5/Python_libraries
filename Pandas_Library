Pandas Library

Pandas is an open-source Python library providing high-performance, easy-to-use data structures and data analysis tools. It is built on top of NumPy and is designed for manipulating and analyzing data, particularly in tabular formats like spreadsheets, SQL tables, or structured CSV files.

Key Features:

    DataFrame and Series objects for handling structured data.
    Tools for reading and writing data between in-memory data structures and different file formats (CSV, Excel, SQL databases, HDF5).
    Intelligent data alignment, indexing, and reshaping capabilities.
    Handles missing data gracefully.
    Allows for slicing, indexing, and subsetting large datasets efficiently.
    Provides powerful group-by functionality and tools for merging/joining datasets.
    Time seriesâ€“specific functionality.

Table of Most Useful and Important Pandas Functions

pd.DataFrame()	Create a DataFrame from a dictionary, list, or other data structure. df = pd.DataFrame(data)
pd.read_csv()	Read data from a CSV file into a DataFrame.	df = pd.read_csv('data.csv')
df.head()	Display the first few rows of the DataFrame. df.head(5)
df.info()	Provides information about the DataFrame (columns, types, missing values). df.info()
df.describe()	Provides summary statistics of numeric columns.	df.describe()
df.columns	Return the column names of the DataFrame.	df.columns
df.shape	Return the shape (number of rows, columns) of the DataFrame. df.shape
df.isnull()	Identify missing values in the DataFrame. df.isnull()
df.fillna()	Fill missing values with a specified value. df.fillna(0)
df.dropna()	Remove rows with missing values. df.dropna()
df.loc[]	Access a group of rows and columns by labels or boolean conditions.	df.loc[0, 'Name']
df.iloc[]	Access a group of rows and columns by integer position.	df.iloc[0, 0]
df.groupby() Group the DataFrame by a particular column and apply aggregation. df.groupby('Age').mean()
pd.merge()	Merge two DataFrames on a common column. pd.merge(df1, df2, on='Name')
df.sort_values() Sort the DataFrame by a specific column. df.sort_values('Age')
df.drop() Drop specified labels from rows or columns. df.drop('column_name', axis=1)
df.set_index() Set a column as the index of the DataFrame. df.set_index('Name')
df.reset_index() Reset the index of the DataFrame. df.reset_index()
df.apply() Apply a function to each element of the DataFrame or Series.	df['Age'].apply(lambda x: x + 1)
pd.concat() Concatenate multiple DataFrames vertically or horizontally.	pd.concat([df1, df2], axis=0)
pd.to_datetime() Convert a column to datetime format. df['Date'] = pd.to_datetime(df['Date'])
df.pivot_table() Create a pivot table for multidimensional data summarization. df.pivot_table(values='Sales', index='Region')
