Matplotlib Library

Matplotlib is a comprehensive Python library for creating static, animated, and interactive visualizations in Python. It is widely used in data science, machine learning, and engineering for producing plots, charts, and figures. Matplotlib is highly customizable, allowing for detailed control over the appearance and behavior of plots.

Its most commonly used module is pyplot, which provides a MATLAB-like interface for creating 2D plots. Matplotlib integrates seamlessly with NumPy and Pandas, making it an essential tool for visualizing data.
Key Features:

    2D plotting: Line plots, scatter plots, bar charts, histograms, and more.
    Subplots and Grid Layouts: Create multi-plot layouts with ease.
    Interactive visualizations: Create dynamic plots that allow zooming, panning, and real-time updates.
    Annotations and Customization: Control every aspect of the plot including labels, legends, ticks, colors, and more.
    Save in multiple formats: Save plots in formats like PNG, JPG, SVG, PDF, etc.
    Integration with Jupyter Notebooks: Plots can be rendered inline within notebooks.

Table of Most Useful and Important Matplotlib Functions

plt.plot() Create a line plot. plt.plot(x, y)
plt.scatter() Create a scatter plot. plt.scatter(x, y)
plt.bar() Create a vertical bar chart. plt.bar(categories, values)
plt.barh() Create a horizontal bar chart. plt.barh(categories, values)
plt.hist() Create a histogram. plt.hist(data, bins=10)
plt.pie() Create a pie chart. plt.pie(sizes, labels=labels, autopct='%1.1f%%')
plt.title() Set the title of the plot. plt.title('My Plot')
plt.xlabel() Set the label for the X-axis. plt.xlabel('X Axis')
plt.ylabel() Set the label for the Y-axis. plt.ylabel('Y Axis')
plt.legend() Add a legend to the plot. plt.legend(['Label1', 'Label2'])
plt.grid() Add a grid to the plot. plt.grid(True)
plt.xlim() Set the X-axis limits. plt.xlim([0, 10])
plt.ylim() Set the Y-axis limits. plt.ylim([0, 50])
plt.xticks() Set custom ticks on the X-axis. plt.xticks([1, 2, 3, 4, 5], ['A', 'B', 'C', 'D', 'E'])
plt.yticks() Set custom ticks on the Y-axis. plt.yticks([0, 20, 40, 60, 80, 100])
plt.subplots() Create a figure with multiple subplots (grid of plots). fig, axs = plt.subplots(2, 2)
plt.subplot() Add a subplot to the current figure. plt.subplot(2, 2, 1)
plt.figure() Create a new figure. plt.figure(figsize=(6, 4))
plt.tight_layout() Automatically adjust subplot parameters for a neat layout. plt.tight_layout()
plt.show() Display the plot on the screen. plt.show()
plt.savefig() Save the current figure to a file. plt.savefig('plot.png')
plt.errorbar() Plot with error bars. plt.errorbar(x, y, yerr=0.2)
plt.fill_between() Fill the area between two horizontal curves (shaded area). plt.fill_between(x, y1, y2)
plt.annotate() Annotate a specific point on the plot. plt.annotate('Label', xy=(2, 4), xytext=(3, 5), arrowprops={})
plt.axhline() Add a horizontal line across the plot. plt.axhline(y=5, color='r', linestyle='--')
plt.axvline() Add a vertical line across the plot. plt.axvline(x=2, color='b', linestyle='--')
plt.axhspan() Highlight a horizontal span across the plot. plt.axhspan(1, 3, color='gray', alpha=0.5)
plt.axvspan() Highlight a vertical span across the plot. plt.axvspan(1, 2, color='yellow', alpha=0.3)
